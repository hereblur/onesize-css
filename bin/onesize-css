#!/usr/bin/env node
var fs = require('fs')

var onesizeCss = require("../sources/onesize-css")


var args = process.argv.slice( process.argv[0].match(/node$/)? 2:1 );

var options = { 
	paths: [],
};


var output = false

var isTrue = function(arg) {
    var match = /^((on|true|y|yes)|(off|false|n|no))$/i.exec(arg);
    if (!match) {
        throw new Error( "Unknown boolean `" + arg + "`." )
    }
    return !!(match[2]);
};

var isGoodArgs = function(arg, option) {
    if (!option) {
        throw new Error( arg + " option requires a parameter" )
    }
    return true;
};



var usage = function(){
	console.log(process.argv[1].split(/[\/\\]/).pop() + ' ' + onesizeCss.version.join('.') );
	console.log("Usage: " +process.argv[1].split(/[\/\\]/).pop() + " [options option=parameter ...] <source> [more-source ...]");
	console.log("");
	console.log("options:");
	console.log("  <source>                 CSS file(s), also supported less and sass.");
	console.log("  -h, --help               Print help (this message) and exit.");
	console.log("  -mini, --minify          Minify output.");
	console.log("  -w, --width          	Virtual screen width for matching the rules. default is 1024. ");
	console.log("  -pf, --prefix            Prefix for generated CSS selector.");
	console.log("  -o, --output             Output filename. If no specify, it's write to stdout.");
	console.log("  -v, --version            Print version number and exit.");
	console.log("  --verbose                Be verbose.");
	console.log("");
	console.log("Issues: https://github.com/hereblur/onesize-css/issues");	
}

try{
		 args = args.filter(function (arg) {
		    var match;
 
 		    if (match = arg.match(/^--?([a-z][0-9a-z-]*)(?:=(.*))?$/i)) { 
		    	arg = match[1] 
		    }
		    else { 
		    	return arg 
		    }

		    switch (arg) {
		    	case 'h': 
		    	case 'help' :
		    		usage();
		    		process.exit(code=0)
		    		break;
		        case 'v':
		        case 'version':
		            console.log(process.argv[1].split(/[\/\\]/).pop() + ' ' + onesizeCss.version.join('.') );
		            process.exit(code=0)
		        case 'verbose':
		            options.verbose = true;
		            break;
		        case 'mini':
		        case 'minify':
		        case 'compress':
		            if ( match[2] ) {
		            	options.minify = isTrue( match[2] )
		            }else
		            	options.minify = true;
		            break;

		        case 'w':
		        case 'width':

		            if (isGoodArgs(arg, match[2])) {
		                
		                options.width = parseInt(match[2], 10);
		                if (isNaN(options.width) || options.width <= 0) {
							throw new Error("Invalid width: `" +match[2]+ "`. ")
		                }
		            }
		            break;

		        case 'pf':
		        case 'prefix':
		        case 'cssprefix':
		            if (isGoodArgs(arg, match[2])) {
		                  options.cssprefix = match[2];
		            }
		            break;

		        case 'o':
		        case 'output':
		            if (isGoodArgs(arg, match[2])) {
		                output = match[2];
		            }
		            break;

		        default:
		            throw new Error("Unknown option "+ arg +".")
		            break;
		    }
		});


		if(args.length <=0){
			throw new Error("No input file.")
		}

		var cosm = new onesizeCss( options )
		args.forEach(function(file){
			cosm.addFile(file);	
		})

		cosm.getResultCss( function(err, code){
			if(err){
				console.log(err.message)
				console.log('`' + process.argv[1].split(/[\/\\]/).pop() + ' --help` for help');
				process.exit(code=-1)
			}else{
				if(output){
					fs.writeFile(output, code, {encoding: 'utf-8'}, function(err,data){
						if(err){
							console.log(err.message)
							console.log('`' + process.argv[1].split(/[\/\\]/).pop() + ' --help` for help');
							process.exit(code=-1)
						}else{
							console.log("done")
						}
					})
				}else{
					console.log(code)
				}
			}
		})



}catch(e){
	console.log(e.message)
	console.log('`' + process.argv[1].split(/[\/\\]/).pop() + ' --help` for help');
	process.exit(code=-1)
}

